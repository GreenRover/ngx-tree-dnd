{"version":3,"sources":["webpack:///./dist/ngx-tree-dnd/fesm5/ngx-tree-dnd.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAmB;AACwH;AAC5F;AACQ;AAChC;AACK;AACV;AACyD;;AAE3E;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,qHAAuE,gBAAgB;AACvF;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE,qBAAqB,EAAE;AAChD;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,sIAAwF,UAAU;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA,sIAAwF,UAAU;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,gBAAgB;AACvD;AACA;AACA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qHAAuE,gBAAgB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qHAAuE,gBAAgB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qHAAuE,gBAAgB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uHAAyE,UAAU;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ,gBAAgB;AACnD;AACA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD,WAAW;AAC5D,gIAA0E,6CAA6C,6BAA6B,EAAE,6CAA6C;AACnM;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,sHAAwE,UAAU;AAClF;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,+JAA+J,sBAAsB;AACrL,iBAAiB,IAAI;AACrB;AACA;AACA,yDAAyD;AACzD,SAAS;AACT,MAAM;AACN;AACA,uBAAuB,6DAAe;AACtC,uBAAuB,6DAAe;AACtC,uBAAuB,6DAAe;AACtC,kBAAkB,6DAAe;AACjC,uBAAuB,6DAAe;AACtC,qBAAqB,6DAAe;AACpC,qBAAqB,6DAAe;AACpC,wBAAwB,6DAAe;AACvC,wBAAwB,6DAAe;AACvC,kBAAkB,4DAAc;AAChC,oBAAoB,4DAAc;AAClC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uHAAyE,UAAU;AACnF;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,4DAA4D,YAAY,2FAA2F,oCAAoC,uGAAuG,gCAAgC,2EAA2E,sGAAsG,iCAAiC,6DAA6D,0BAA0B,+CAA+C,mFAAmF,cAAc,2EAA2E,+CAA+C,0IAA0I,cAAc,2jDAA2jD,22CAA22C,uBAAuB;AACt9H,iBAAiB,IAAI;AACrB;AACA;AACA,2DAA2D;AAC3D,SAAS,uBAAuB;AAChC,SAAS;AACT,MAAM;AACN;AACA,mBAAmB,4DAAc;AACjC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,qDAAqD;AACrD,SAAS;AACT,MAAM;AACN;AACA,qBAAqB,4DAAc;AACnC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,wDAAwD;AACxD,SAAS,iEAAmB;AAC5B,SAAS;AACT,MAAM;AACN;AACA,gBAAgB,4DAAc;AAC9B,0BAA0B,4DAAc;AACxC,qBAAqB,wFAA0C;AAC/D,uBAAuB,qGAAuD;AAC9E,kBAAkB,gGAAkD;AACpE,qBAAqB,mGAAqD;AAC1E;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AAC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","file":"main.js","sourcesContent":["import { __values } from 'tslib';\nimport { Injectable, NgModule, Directive, ElementRef, Input, HostListener, HostBinding, Output, EventEmitter, defineInjectable, Component } from '@angular/core';\nimport { Subject, BehaviorSubject, Observable } from 'rxjs';\nimport { FormBuilder, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faCoffee, faPlus, faEdit, faMinus, faTimes, faCheck, faArrowDown } from '@fortawesome/free-solid-svg-icons';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxTreeService = /** @class */ (function () {\n    function NgxTreeService() {\n        this.treeStorage = [];\n        this.onDragStart = new Subject();\n        this.onDragEnter = new Subject();\n        this.onDragLeave = new Subject();\n        this.onDrop = new Subject();\n        this.onDrag = new Subject();\n        this.onAllowDrop = new Subject();\n        this.onDragEnd = new Subject();\n        this.onAddItem = new Subject();\n        this.onRenameItem = new Subject();\n        this.onRemoveItem = new Subject();\n        this.config = new BehaviorSubject(null);\n        // set default config\n        this.defaulConfig = {\n            showActionButtons: true,\n            showAddButtons: true,\n            showRenameButtons: true,\n            showDeleteButtons: true,\n            enableExpandButtons: true,\n            enableDragging: true,\n            rootTitle: 'Root',\n            validationText: 'Enter valid name',\n            minCharacterLength: 1,\n            setItemsAsLinks: false,\n            setFontSize: 16,\n            setIconSize: 14\n        };\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgxTreeService.prototype.getLocalData = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        var _this = this;\n        var /** @type {?} */ data = new Observable(function (observer) {\n            _this.treeStorage = item;\n            if (_this.treeStorage && _this.treeStorage !== null) {\n                _this.checkTreeLength();\n                observer.next(_this.treeStorage);\n            }\n            else {\n                _this.treeStorage = JSON.parse('[]');\n                observer.next(_this.treeStorage);\n            }\n        });\n        return data;\n    };\n    /**\n     * @param {?} list\n     * @param {?} id\n     * @param {?=} parent\n     * @return {?}\n     */\n    NgxTreeService.prototype.elementFinder = /**\n     * @param {?} list\n     * @param {?} id\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (list, id, parent) {\n        try {\n            for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {\n                var item = list_1_1.value;\n                if (item.id === id) {\n                    this.selectedElement = item; // finded element by id\n                    this.listOfSelectedElement = list;\n                    if (parent) {\n                        this.parentOfSelected = item;\n                    }\n                    break;\n                }\n                else {\n                    if (item.childrens.length > 0) {\n                        this.elementFinder(item.childrens, id, item); // recoursive call\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _a;\n    };\n    /**\n     * @param {?} id\n     * @param {?} name\n     * @param {?=} parent\n     * @return {?}\n     */\n    NgxTreeService.prototype.addNewItem = /**\n     * @param {?} id\n     * @param {?} name\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (id, name, parent) {\n        var /** @type {?} */ pos = 1;\n        if (parent.childrens.length !== 0) {\n            var /** @type {?} */ parentPrevChildren = parent.childrens.length - 1;\n            var /** @type {?} */ newItemPosition = parent.childrens[parentPrevChildren].options.position + 1;\n            pos = newItemPosition;\n        }\n        var /** @type {?} */ createObj = {\n            id: id,\n            name: name,\n            options: {\n                position: pos,\n                edit: true\n            },\n            childrens: []\n        };\n        var /** @type {?} */ eventEmit = {\n            element: createObj,\n            parentList: this.selectedElement\n        };\n        this.elementFinder(this.treeStorage, parent.id);\n        this.selectedElement.childrens.push(createObj);\n        this.clearAction();\n        this.onAddItem.next(eventEmit);\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    NgxTreeService.prototype.deleteItem = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ eventEmit = {\n            element: this.selectedElement,\n            parentList: this.listOfSelectedElement\n        };\n        this.elementFinder(this.treeStorage, id);\n        var /** @type {?} */ i = this.listOfSelectedElement.indexOf(this.selectedElement);\n        this.listOfSelectedElement.splice(i, 1);\n        this.clearAction();\n        this.checkTreeLength();\n        this.onRemoveItem.next(eventEmit);\n    };\n    /**\n     * @param {?} name\n     * @param {?} id\n     * @return {?}\n     */\n    NgxTreeService.prototype.renameItem = /**\n     * @param {?} name\n     * @param {?} id\n     * @return {?}\n     */\n    function (name, id) {\n        this.elementFinder(this.treeStorage, id);\n        // event emit\n        var /** @type {?} */ eventEmit = {\n            element: this.selectedElement,\n            parentList: this.listOfSelectedElement\n        };\n        // code\n        this.selectedElement.name = name;\n        this.selectedElement.options.edit = false;\n        this.clearAction();\n        this.onRenameItem.next(eventEmit);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.startDragging = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        this.switchDropButton(true, this.treeStorage);\n        this.onDragStart.next(eventObj);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.onDragProcess = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        this.onDrag.next(eventObj);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.dragEndAction = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        this.removeDestenationBorders(this.treeStorage);\n        this.switchDropButton(false, this.treeStorage);\n        this.onDragEnd.next(eventObj);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.enterDropZone = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        this.onDragEnter.next(eventObj);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.onDragOver = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        var /** @type {?} */ el = (/** @type {?} */ (eventObj.target));\n        if (el && el.id !== this.isDragging.id) {\n            var /** @type {?} */ elementHalfHeight = eventObj.event.toElement.offsetHeight / 2;\n            if (eventObj.event.offsetY < elementHalfHeight) {\n                el.options.destenationBottom = false;\n                el.options.destenationTop = true;\n            }\n            else {\n                el.options.destenationBottom = true;\n                el.options.destenationTop = false;\n            }\n            this.onAllowDrop.next(eventObj);\n        }\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.leaveDropZone = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        this.removeDestenationBorders(this.treeStorage);\n        this.onDragLeave.next(eventObj);\n    };\n    /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    NgxTreeService.prototype.onDropItem = /**\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventObj) {\n        var _this = this;\n        if (eventObj.target) {\n            var /** @type {?} */ elementHalfHeight = eventObj.event.toElement.offsetHeight / 2;\n            if (eventObj.event.offsetY < elementHalfHeight) {\n                this.changeItemPosition(eventObj.target, 'up');\n            }\n            else {\n                this.changeItemPosition(eventObj.target, 'down');\n            }\n            this.onDrop.next(eventObj);\n        }\n        else {\n            var /** @type {?} */ dropZoneId = parseInt(eventObj.event.target.getAttribute('data-id'), null);\n            this.elementFinder(this.treeStorage, this.isDragging.id);\n            var /** @type {?} */ i = this.listOfSelectedElement.indexOf(this.selectedElement);\n            var /** @type {?} */ copyItem = this.listOfSelectedElement.splice(i, 1)[0];\n            this.elementFinder(this.treeStorage, dropZoneId);\n            this.selectedElement.childrens.push(copyItem);\n            this.sortTree();\n            eventObj.target = this.selectedElement;\n            this.onDrop.next(eventObj);\n        }\n        this.removeDestenationBorders(this.treeStorage);\n        this.switchDropButton(false, this.treeStorage);\n        this.clearAction();\n        setTimeout(function () {\n            _this.checkTreeLength();\n        });\n    };\n    /**\n     * @param {?} el\n     * @param {?} direction\n     * @return {?}\n     */\n    NgxTreeService.prototype.changeItemPosition = /**\n     * @param {?} el\n     * @param {?} direction\n     * @return {?}\n     */\n    function (el, direction) {\n        var _this = this;\n        setTimeout(function () {\n            _this.elementFinder(_this.treeStorage, _this.isDragging.id);\n            var /** @type {?} */ i = _this.listOfSelectedElement.indexOf(_this.selectedElement);\n            var /** @type {?} */ copyItem = _this.listOfSelectedElement.splice(i, 1)[0];\n            // end test\n            var /** @type {?} */ positionTarget = el.options.position;\n            _this.elementFinder(_this.treeStorage, el.id);\n            if (direction === 'up') {\n                try {\n                    for (var _a = __values(_this.listOfSelectedElement), _b = _a.next(); !_b.done; _b = _a.next()) {\n                        var items = _b.value;\n                        if (items.options.position >= positionTarget) {\n                            items.options.position = items.options.position + 1;\n                            copyItem.options.position = positionTarget;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            else {\n                try {\n                    for (var _d = __values(_this.listOfSelectedElement), _e = _d.next(); !_e.done; _e = _d.next()) {\n                        var items = _e.value;\n                        if (items.options.position <= positionTarget) {\n                            items.options.position = items.options.position - 1;\n                        }\n                    }\n                }\n                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                finally {\n                    try {\n                        if (_e && !_e.done && (_f = _d.return)) _f.call(_d);\n                    }\n                    finally { if (e_3) throw e_3.error; }\n                }\n            }\n            copyItem.options.position = positionTarget;\n            _this.listOfSelectedElement.push(copyItem);\n            _this.sortTree();\n            var e_2, _c, e_3, _f;\n        });\n    };\n    // get position of item\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgxTreeService.prototype.getItemPosition = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        this.elementFinder(this.treeStorage, item.id);\n        var /** @type {?} */ position = this.listOfSelectedElement.indexOf(this.selectedElement);\n        return ++position;\n    };\n    /**\n     * @return {?}\n     */\n    NgxTreeService.prototype.sortTree = /**\n     * @return {?}\n     */\n    function () {\n        this.sortElements(this.treeStorage);\n    };\n    /**\n     * @param {?} tree\n     * @return {?}\n     */\n    NgxTreeService.prototype.sortElements = /**\n     * @param {?} tree\n     * @return {?}\n     */\n    function (tree) {\n        tree.sort(this.compate);\n        try {\n            for (var tree_1 = __values(tree), tree_1_1 = tree_1.next(); !tree_1_1.done; tree_1_1 = tree_1.next()) {\n                var item = tree_1_1.value;\n                if (item.childrens.length > 0) {\n                    this.sortElements(item.childrens);\n                }\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (tree_1_1 && !tree_1_1.done && (_a = tree_1.return)) _a.call(tree_1);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        var e_4, _a;\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    NgxTreeService.prototype.compate = /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function (a, b) {\n        if (a.options.position < b.options.position) {\n            return -1;\n        }\n        if (a.options.position > b.options.position) {\n            return 1;\n        }\n        return 0;\n    };\n    /**\n     * @return {?}\n     */\n    NgxTreeService.prototype.clearAction = /**\n     * @return {?}\n     */\n    function () {\n        this.selectedElement = null;\n        this.listOfSelectedElement = null;\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    NgxTreeService.prototype.removeDestenationBorders = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        try {\n            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n                var item = data_1_1.value;\n                item.options.destenationBottom = false;\n                item.options.destenationTop = false;\n                if (item.childrens.length > 0) {\n                    this.removeDestenationBorders(item.childrens);\n                }\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        var e_5, _a;\n    };\n    /**\n     * @param {?} bool\n     * @param {?} data\n     * @return {?}\n     */\n    NgxTreeService.prototype.switchDropButton = /**\n     * @param {?} bool\n     * @param {?} data\n     * @return {?}\n     */\n    function (bool, data) {\n        try {\n            for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {\n                var el = data_2_1.value;\n                el.options.showActionButtons = !bool;\n                if (el.id !== this.isDragging.id) {\n                    el.options.showDropChildZone = bool;\n                }\n                if (el.childrens.length > 0) {\n                    this.switchDropButton(bool, el.childrens);\n                }\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n        var e_6, _a;\n    };\n    /**\n     * @return {?}\n     */\n    NgxTreeService.prototype.checkTreeLength = /**\n     * @return {?}\n     */\n    function () {\n        if (this.treeStorage.length < 2) {\n            this.treeStorage[0].options.showDeleteButton = false;\n        }\n        else {\n            try {\n                for (var _a = __values(this.treeStorage), _b = _a.next(); !_b.done; _b = _a.next()) {\n                    var el = _b.value;\n                    if (el && el.options) {\n                        el.options.showDeleteButton = true;\n                    }\n                }\n            }\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\n            finally {\n                try {\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                }\n                finally { if (e_7) throw e_7.error; }\n            }\n        }\n        var e_7, _c;\n    };\n    NgxTreeService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] },\n    ];\n    /** @nocollapse */\n    NgxTreeService.ctorParameters = function () { return []; };\n    /** @nocollapse */ NgxTreeService.ngInjectableDef = defineInjectable({ factory: function NgxTreeService_Factory() { return new NgxTreeService(); }, token: NgxTreeService, providedIn: \"root\" });\n    return NgxTreeService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxTreeParentComponent = /** @class */ (function () {\n    function NgxTreeParentComponent(treeService) {\n        this.treeService = treeService;\n        this.userConfig = {\n            showActionButtons: true,\n            showAddButtons: true,\n            showRenameButtons: true,\n            showDeleteButtons: true,\n            enableExpandButtons: true,\n            enableDragging: true,\n            rootTitle: 'Root',\n            validationText: 'Enter valid name',\n            minCharacterLength: 1,\n            setItemsAsLinks: false,\n            setFontSize: 16,\n            setIconSize: 14\n        };\n        this.ondragstart = new EventEmitter();\n        this.ondragenter = new EventEmitter();\n        this.ondragleave = new EventEmitter();\n        this.ondrop = new EventEmitter();\n        this.onallowdrop = new EventEmitter();\n        this.ondragend = new EventEmitter();\n        this.onadditem = new EventEmitter();\n        this.onrenameitem = new EventEmitter();\n        this.onremoveitem = new EventEmitter();\n        this.enableSubscribers();\n    }\n    Object.defineProperty(NgxTreeParentComponent.prototype, \"config\", {\n        set: /**\n         * @param {?} config\n         * @return {?}\n         */\n        function (config) {\n            // seal config\n            Object.seal(this.userConfig);\n            try {\n                // if config it`s pass\n                this.setConfig(config);\n                this.treeService.config.next(this.userConfig);\n            }\n            catch (/** @type {?} */ error) {\n                // if config invalid\n                console.log('Config is invalid! Default configuragion will be appeared');\n                this.treeService.config.next(this.treeService.defaulConfig);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxTreeParentComponent.prototype, \"treeData\", {\n        set: /**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) {\n            // get user tree data\n            this.getTreeData(item);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // set user config\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NgxTreeParentComponent.prototype.setConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        try {\n            for (var _a = __values(Object.keys(config)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var key = _b.value;\n                this.setValue(key, config);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _c;\n    };\n    // set value to keys of config\n    /**\n     * @param {?} item\n     * @param {?} config\n     * @return {?}\n     */\n    NgxTreeParentComponent.prototype.setValue = /**\n     * @param {?} item\n     * @param {?} config\n     * @return {?}\n     */\n    function (item, config) {\n        this.userConfig[item] = config[item];\n    };\n    // subscribe to all events and emit them to user.\n    /**\n     * @return {?}\n     */\n    NgxTreeParentComponent.prototype.enableSubscribers = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.treeService.onDrop.subscribe(function (event) {\n            _this.ondrop.emit(event);\n        });\n        this.treeService.onDragStart.subscribe(function (event) {\n            _this.ondragstart.emit(event);\n        });\n        this.treeService.onAllowDrop.subscribe(function (event) {\n            _this.onallowdrop.emit(event);\n        });\n        this.treeService.onDragEnd.subscribe(function (event) {\n            _this.ondragend.emit(event);\n        });\n        this.treeService.onAddItem.subscribe(function (event) {\n            _this.onadditem.emit(event);\n        });\n        this.treeService.onRenameItem.subscribe(function (event) {\n            _this.onrenameitem.emit(event);\n        });\n        this.treeService.onRemoveItem.subscribe(function (event) {\n            _this.onremoveitem.emit(event);\n        });\n        this.treeService.onDragEnter.subscribe(function (event) {\n            _this.ondragenter.emit(event);\n        });\n        this.treeService.onDragLeave.subscribe(function (event) {\n            _this.ondragleave.emit(event);\n        });\n    };\n    // get tree data from treeService.\n    /**\n     * @param {?} userTree\n     * @return {?}\n     */\n    NgxTreeParentComponent.prototype.getTreeData = /**\n     * @param {?} userTree\n     * @return {?}\n     */\n    function (userTree) {\n        var _this = this;\n        this.treeService.getLocalData(userTree).subscribe(function (tree) {\n            _this.treeView = tree;\n            setTimeout(function () {\n                _this.treeService.sortTree();\n            });\n        }, function (error) {\n            console.log(error);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    NgxTreeParentComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { };\n    NgxTreeParentComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'lib-ngx-tree-component',\n                    template: \"<div id='threeWrapper' *ngIf=\\\"treeView\\\" [style.font-size.px]='userConfig.setFontSize'>\\n    <div class='root-title'>\\n      {{userConfig.rootTitle}}\\n    </div>\\n    <div class='tree-child'>\\n      <div class=\\\"tree-content-main\\\">\\n          <lib-ngx-tree-children [setItem]=\\\"clild\\\" *ngFor='let clild of treeView'></lib-ngx-tree-children>\\n      </div>\\n    </div>\\n  </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxTreeParentComponent.ctorParameters = function () { return [\n        { type: NgxTreeService }\n    ]; };\n    NgxTreeParentComponent.propDecorators = {\n        ondragstart: [{ type: Output }],\n        ondragenter: [{ type: Output }],\n        ondragleave: [{ type: Output }],\n        ondrop: [{ type: Output }],\n        onallowdrop: [{ type: Output }],\n        ondragend: [{ type: Output }],\n        onadditem: [{ type: Output }],\n        onrenameitem: [{ type: Output }],\n        onremoveitem: [{ type: Output }],\n        config: [{ type: Input }],\n        treeData: [{ type: Input }]\n    };\n    return NgxTreeParentComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxTreeChildrenComponent = /** @class */ (function () {\n    function NgxTreeChildrenComponent(treeService, fb) {\n        this.treeService = treeService;\n        this.fb = fb;\n    }\n    Object.defineProperty(NgxTreeChildrenComponent.prototype, \"setItem\", {\n        // get item from parent component\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) {\n            this.element = data;\n            this.itemOptions = {\n                href: '#',\n                hidden: false,\n                hideChildrens: false,\n                position: this.treeService.getItemPosition(this.element),\n                draggable: true,\n                edit: false,\n                showActionButtons: true,\n                currentlyDragging: false,\n                destenationTop: false,\n                destenationBottom: false,\n                disabled: false,\n                showExpandButton: true,\n                showDeleteButton: true\n            };\n            if (this.element.options) {\n                this.setOptions(this.element.options);\n                this.element.options = this.itemOptions;\n            }\n            else {\n                this.element.options = this.itemOptions;\n            }\n            // enable subscribers\n            this.enableSubscribers();\n            // create form\n            this.createForm();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // enable subscribe to config\n    /**\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.enableSubscribers = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.treeService.config.subscribe(function (config) {\n            if (config !== null) {\n                _this.config = config;\n            }\n            else {\n                _this.config = _this.treeService.defaulConfig;\n            }\n            if (_this.element.options.draggable) {\n                _this.element.options.draggable = _this.config.enableDragging;\n            }\n        });\n    };\n    // set options to item\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.setOptions = /**\n     * @param {?} options\n     * @return {?}\n     */\n    function (options) {\n        try {\n            for (var _a = __values(Object.keys(options)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var key = _b.value;\n                this.setValue(key, options);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var e_1, _c;\n    };\n    // set value to options keys\n    /**\n     * @param {?} item\n     * @param {?} options\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.setValue = /**\n     * @param {?} item\n     * @param {?} options\n     * @return {?}\n     */\n    function (item, options) {\n        this.itemOptions[item] = options[item];\n    };\n    // create edit form\n    /**\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.createForm = /**\n     * @return {?}\n     */\n    function () {\n        this.renameForm = this.fb.group({\n            name: [this.element.name || '', [\n                    Validators.required,\n                    Validators.minLength(this.config.minCharacterLength)\n                ]],\n        });\n    };\n    /*\n      Event: onadditem;\n      Generate id by new Date() by 'full year + day + time'.\n      Call addNewItem() from tree service.\n    */\n    /**\n     * @param {?} name\n     * @param {?} item\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.submitAdd = /**\n     * @param {?} name\n     * @param {?} item\n     * @return {?}\n     */\n    function (name, item) {\n        var /** @type {?} */ d = \"\" + new Date().getFullYear() + new Date().getDay() + new Date().getTime();\n        var /** @type {?} */ elemId = parseInt(d, null);\n        this.treeService.addNewItem(elemId, name, item);\n        this.element.options.hideChildrens = false;\n    };\n    /*\n      Event: onrenameitem;\n      Check is form valid.\n      Call addNewItem() from tree service.\n    */\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.submitRename = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        if (this.renameForm.valid) {\n            this.showError = false;\n            this.treeService.renameItem(this.renameForm.value.name, item.id);\n            this.element.options.edit = false;\n        }\n        else {\n            this.showError = true;\n        }\n    };\n    /*\n      Event: onremoveitem;\n      Check is item edit, then if name empty delete item.\n      Call deleteItem() from tree service.\n    */\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.onSubmitDelete = /**\n     * @param {?} item\n     * @return {?}\n     */\n    function (item) {\n        if (!this.element.options.edit) {\n            this.treeService.deleteItem(item.id);\n        }\n        else {\n            if (item.name === null) {\n                this.treeService.deleteItem(item.id);\n            }\n            else {\n                this.element.options.edit = false;\n            }\n        }\n    };\n    // after view init\n    /**\n     * @return {?}\n     */\n    NgxTreeChildrenComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { };\n    NgxTreeChildrenComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'lib-ngx-tree-children',\n                    template: \"<div class='tree-child' id={{element.id}} libDragElement [draggableValue]='element.options.draggable' [item]='element' [ngClass]=\\\"{disabled : element.options.disabled}\\\">\\n  <div *ngIf=\\\"element && element.options\\\" class='d-flex'>\\n    <div *ngIf='config' [ngClass]=\\\"{hidden : element.options.hidden}\\\">\\n      <div class='tree-title d-inline-flex pos-relative' [ngClass]=\\\"{destenationTop : element.options.destenationTop, destenationBottom: element.options.destenationBottom}\\\" *ngIf=\\\"!element.options.edit;else onEdit\\\">\\n        <div *ngIf=\\\"!config.setItemsAsLinks; else link\\\" [ngClass]=\\\"{addOpacity : element.options.currentlyDragging}\\\" libDropElement\\n          [item]='element' class='draggable-item'>\\n          {{element.name}}\\n        </div>\\n        <ng-template #link>\\n          <div [ngClass]=\\\"{addOpacity : element.options.currentlyDragging}\\\" libDropElement\\n          [item]='element' class='draggable-item'>\\n            <a [href]=\\\"element.options.href\\\" class='tree-link'>{{element.name}}</a>\\n          </div>\\n        </ng-template>\\n        <div class='d-flex buttons-bar' *ngIf=\\\"config.showActionButtons && element.options.showActionButtons && !element.options.disabled\\\">\\n          <div class='d-flex'>\\n            <button class=\\\"tree-btn add-btn\\\" *ngIf=\\\"config.showAddButtons\\\" (click)=\\\"submitAdd(null, element)\\\">\\n              <fa-icon icon=\\\"plus\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n          </div>\\n          <div class='d-flex'>\\n            <button class=\\\"tree-btn edit-btn\\\" *ngIf=\\\"config.showRenameButtons\\\" (click)=\\\"element.options.edit = true\\\">\\n              <fa-icon icon=\\\"edit\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n          </div>\\n          <div class='d-flex'>\\n            <button class=\\\"tree-btn delete-btn\\\" *ngIf=\\\"config.showDeleteButtons && element.options.showDeleteButton\\\" (click)=\\\"onSubmitDelete( element )\\\">\\n              <fa-icon icon=\\\"times\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n          </div>\\n        </div>\\n        <div class='child-drop-place' [attr.data-id]='element.id'  libDropElement *ngIf='element.options.showDropChildZone && !element.options.disabled'>\\n          <fa-icon icon=\\\"arrow-down\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n        </div>\\n        <div class='show-hide-switch' *ngIf=\\\"config.enableExpandButtons && element.options.showExpandButton && element.childrens.length > 0 && !element.options.disabled\\\">\\n          <div *ngIf=\\\"element.options.hideChildrens; else visible\\\">\\n            <button class='tree-btn show-btn' (click)='element.options.hideChildrens = false'>\\n              <fa-icon icon=\\\"plus\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n          </div>\\n          <ng-template #visible>\\n            <button class='tree-btn hide-btn' (click)='element.options.hideChildrens = true'>\\n              <fa-icon icon=\\\"minus\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n          </ng-template>\\n        </div>\\n      </div>\\n      <ng-template #onEdit>\\n        <div class='tree-title d-inline-flex'>\\n          <form [formGroup]=\\\"renameForm\\\" class='d-flex' (submit)='submitRename(element)'>\\n            <input type=\\\"text\\\" class='input-rename' formControlName=\\\"name\\\" libAutoFocus=\\\"true\\\" [style.font-size.px]='config.setFontSize'>\\n          </form>\\n          <div class='d-flex'>\\n            <button class='tree-btn submit-btn' (click)='submitRename(element)'>\\n              <fa-icon icon=\\\"check\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n            <button class='tree-btn delete-btn' (click)='onSubmitDelete(element)'>\\n              <fa-icon icon=\\\"times\\\" [style.font-size.px]='config.setIconSize'></fa-icon>\\n            </button>\\n            <div class='error-edit-wrap' *ngIf=\\\"showError\\\">\\n              {{config.validationText}}\\n            </div>\\n          </div>\\n        </div>\\n      </ng-template>\\n      <div class=\\\"tree-content\\\" *ngIf=\\\"element.childrens && !element.options.hideChildrens\\\">\\n        <lib-ngx-tree-children [setItem]=\\\"child\\\" *ngFor='let child of element.childrens'></lib-ngx-tree-children>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxTreeChildrenComponent.ctorParameters = function () { return [\n        { type: NgxTreeService },\n        { type: FormBuilder }\n    ]; };\n    NgxTreeChildrenComponent.propDecorators = {\n        setItem: [{ type: Input }]\n    };\n    return NgxTreeChildrenComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar AutoFocusDirective = /** @class */ (function () {\n    function AutoFocusDirective(el) {\n        this.el = el;\n        this.focus = true;\n    }\n    /**\n     * @return {?}\n     */\n    AutoFocusDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.focus) {\n            window.setTimeout(function () {\n                _this.el.nativeElement.focus();\n            });\n        }\n    };\n    Object.defineProperty(AutoFocusDirective.prototype, \"autofocus\", {\n        set: /**\n         * @param {?} condition\n         * @return {?}\n         */\n        function (condition) {\n            this.focus = condition !== false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AutoFocusDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[libAutoFocus]'\n                },] },\n    ];\n    /** @nocollapse */\n    AutoFocusDirective.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    AutoFocusDirective.propDecorators = {\n        autofocus: [{ type: Input }]\n    };\n    return AutoFocusDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DragElementsDirective = /** @class */ (function () {\n    function DragElementsDirective(el, treeService) {\n        this.el = el;\n        this.treeService = treeService;\n    }\n    Object.defineProperty(DragElementsDirective.prototype, \"draggable\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.draggableValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n        Event: ondragstart;\n        Set item as dragging and call startDragging() from tree service.\n        Emit OnDragStart on tree service.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DragElementsDirective.prototype.onDragStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        this.treeService.isDragging = this.item;\n        this.treeService.lastExpandState = this.item.options.hideChildrens;\n        this.item.options.hideChildrens = true;\n        this.item.options.currentlyDragging = true;\n        // call service func\n        this.treeService.startDragging(eventObj);\n        event.stopPropagation();\n    };\n    /*\n        Event: onDrag;\n        trigger drag items and call onDragProcess() from tree service.\n        Emit OnDrag on tree service.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DragElementsDirective.prototype.onDrag = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        this.treeService.onDragProcess(eventObj);\n    };\n    /*\n        Event: ondragend;\n        Call dragEndAction() from tree service.\n        Emit OnDragEnd on tree service.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DragElementsDirective.prototype.onDragEnd = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        this.item.options.hideChildrens = this.treeService.lastExpandState;\n        this.item.options.currentlyDragging = false;\n        this.treeService.dragEndAction(eventObj);\n        event.stopPropagation();\n    };\n    DragElementsDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[libDragElement]'\n                },] },\n    ];\n    /** @nocollapse */\n    DragElementsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgxTreeService }\n    ]; };\n    DragElementsDirective.propDecorators = {\n        item: [{ type: Input }],\n        draggableValue: [{ type: Input }],\n        draggable: [{ type: HostBinding, args: ['draggable',] }],\n        onDragStart: [{ type: HostListener, args: ['dragstart', ['$event'],] }],\n        onDrag: [{ type: HostListener, args: ['drag', ['$event'],] }],\n        onDragEnd: [{ type: HostListener, args: ['dragend', ['$event'],] }]\n    };\n    return DragElementsDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DropElementsDirective = /** @class */ (function () {\n    function DropElementsDirective(el, treeService) {\n        this.el = el;\n        this.treeService = treeService;\n        this.drop = new EventEmitter();\n    }\n    /*\n        Event: onallowdrop;\n        Call onDragOver() from tree service.\n        Emit onAllowDrop on tree service.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DropElementsDirective.prototype.onDragOver = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        this.treeService.onDragOver(eventObj);\n        event.preventDefault();\n    };\n    /*\n        Event: ondrop;\n        Call onDropItem() from tree service.\n        Emit OnDrop on tree service.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DropElementsDirective.prototype.onDrop = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ dragItem = this.treeService.isDragging;\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        dragItem.options.hideChildrens = this.treeService.lastExpandState;\n        dragItem.options.currentlyDragging = false;\n        if (dragItem !== eventObj.target) {\n            this.treeService.onDropItem(eventObj);\n        }\n        event.preventDefault();\n    };\n    /*s\n    Event: ondragenter;\n    Detect event where draggable element enter in drop zone.\n    Call enterDropZone() from tree service.\n    Emit onDragEnter.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DropElementsDirective.prototype.onDragEnter = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        this.treeService.enterDropZone(eventObj);\n    };\n    /*\n        Event: ondragleave;\n        Detect event where draggable element leave drop zone.\n        Call leaveDropZone() from tree service.\n        Emit onDragLeave.\n    */\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DropElementsDirective.prototype.onDragLeave = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        // emit events\n        var /** @type {?} */ eventObj = {\n            event: event,\n            target: this.item\n        };\n        // code\n        this.treeService.leaveDropZone(eventObj);\n    };\n    DropElementsDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[libDropElement]'\n                },] },\n    ];\n    /** @nocollapse */\n    DropElementsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgxTreeService }\n    ]; };\n    DropElementsDirective.propDecorators = {\n        item: [{ type: Input }],\n        drop: [{ type: Output }],\n        onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],\n        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }],\n        onDragEnter: [{ type: HostListener, args: ['dragenter', ['$event'],] }],\n        onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }]\n    };\n    return DropElementsDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nlibrary.add(faCoffee, faPlus, faEdit, faMinus, faTimes, faCheck, faArrowDown);\nvar NgxTreeDndModule = /** @class */ (function () {\n    function NgxTreeDndModule() {\n    }\n    NgxTreeDndModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        FontAwesomeModule\n                    ],\n                    declarations: [\n                        AutoFocusDirective,\n                        DragElementsDirective,\n                        DropElementsDirective,\n                        NgxTreeParentComponent,\n                        NgxTreeChildrenComponent\n                    ],\n                    exports: [\n                        AutoFocusDirective,\n                        DragElementsDirective,\n                        DropElementsDirective,\n                        NgxTreeParentComponent,\n                        NgxTreeChildrenComponent\n                    ]\n                },] },\n    ];\n    return NgxTreeDndModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { NgxTreeService, NgxTreeParentComponent, NgxTreeChildrenComponent, AutoFocusDirective, DragElementsDirective, DropElementsDirective, NgxTreeDndModule };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div>\\n  <lib-ngx-tree-component [treeData]='myTree' (ondrop)='onDrop($event)' [config]='config'>\\n  </lib-ngx-tree-component>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  config = {\n    showActionButtons: true,\n    showAddButtons: true,\n    showRenameButtons: true,\n    showDeleteButtons: true,\n    enableExpandButtons: true,\n    enableDragging: true,\n    rootTitle: 'My Tree',\n    validationText: 'need valid',\n    minCharacterLength: 7,\n    setItemsAsLinks: false,\n    setFontSize: 24,\n    setIconSize: 16\n  };\n  myTree = [\n    {\n      name: 'item - 1',\n      id: 123,\n      options: {\n        href: 'FFFFFFFFFFF',\n        showActionButtons: true,\n        showDropChildZone: false,\n        showExpandButton: true,\n        draggable: false,\n        disabled: false,\n        hideChildrens: false,\n      },\n      childrens: [\n        {\n          name: 'child - item - 1',\n          id: 456,\n          options: {\n\n          },\n          childrens: [\n            {\n              name: 'deep - item - 1',\n              id: 1222,\n              options: {\n\n              },\n              childrens: []\n            },\n          ]\n        },\n      ]\n    },\n    {\n      name: 'item - 2',\n      id: 1533,\n      options: {\n\n      },\n      childrens: []\n    },\n    {\n      name: 'item - 3',\n      id: 9683,\n      options: {\n\n      },\n      childrens: []\n    }\n  ];\n\n  onDrop(event) {\n    console.log(this.myTree);\n    console.log(event);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxTreeDndModule } from '../../dist/ngx-tree-dnd';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxTreeDndModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}